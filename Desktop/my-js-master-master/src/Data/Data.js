export const Data = [
  {
    date: '01.02.23',
    newImg: "sfd",
    id: "1",
    img: "https://thumb.tildacdn.com/tild3062-6164-4231-b137-396165336661/-/cover/718x404/center/center/-/format/webp/_1.png",
    description: "Гайд для трудяг IT-индустрии",
    fullText: [
      "Боль в кистях рук, сухость глаз, перенапряжение шейного отдела позвоночника и другие симптомы продолжительных сессий за компьютером — с этим сталкивается почти каждый наш коллега, будь то DevOps-специалист или дизайнер.  А самое неприятное – это всё ломает рабочий дзен. Сегодня мы с вами попробуем разобраться, что не так с нашими рабочими местами, и исправить это.,Эргономика современных компьютеров довольно поломанная. Её дизайн продиктован компромиссными решениями, принятыми в условиях технических ограничений прошлого столетия. Ситуация с тех пор сильно изменилась, а подход к организации «воркспейсов» — почему-то нет,Эргономика современных компьютеров довольно поломанная. Её дизайн продиктован компромиссными решениями, принятыми в условиях технических ограничений прошлого столетия. Ситуация с тех пор сильно изменилась, а подход к организации «воркспейсов» — почему-то нет,Почему стоит задуматься об эргономике рабочего места? Вот несколько веских причин:, Во-первых, это красиво! Индивидуальный сетап рабочего места всегда выигрышно смотрится со стороны, что не может не радовать. ,Здоровье. Его нужно беречь. И чем раньше задуматься об этом, тем дешевле это обойдётся в будущем.,Увеличение эффективности работы. Можно погрузиться в процесс, не отвлекаясь на такие раздражающие мелочи, как поиск вкладки, выравнивание окон терминала, затёкший шейный отдел или уставшие кисти рук.",
      "Эргономика современных компьютеров довольно поломанная. Её дизайн продиктован компромиссными решениями, принятыми в условиях технических ограничений прошлого столетия. Ситуация с тех пор сильно изменилась, а подход к организации «воркспейсов» — почему-то нет.",
      "Почему стоит задуматься об эргономике рабочего места? Вот несколько веских причин:",
      "Во-первых, это красиво! Индивидуальный сетап рабочего места всегда выигрышно смотрится со стороны, что не может не радовать.",
      "Здоровье. Его нужно беречь. И чем раньше задуматься об этом, тем дешевле это обойдётся в будущем.",
      "Увеличение эффективности работы. Можно погрузиться в процесс, не отвлекаясь на такие раздражающие мелочи, как поиск вкладки, выравнивание окон терминала, затёкший шейный отдел или уставшие кисти рук.",
    ],
  },
  {
    date: '11.03.23',
    newImg: "",
    id: "2",
    img: "https://hsto.org/r/w1560/getpro/habr/upload_files/054/312/ffb/054312ffb379ffad39625ea90815e1a1.png",
    description: "Почему ваши A/B-тесты не работают",
    fullText: [
      "Это не пустые слова, результат многомесячного труда кучи людей может обесцениться в один момент, например, из-за неправильной агрегации данных или неправильной оценки статистической значимости равенства средних для ratio-метрики. Что уж говорить о более сложных проблемах, таких как множественное тестирование и ранняя остановка ваших тестов. У A/B-тестов есть хорошее свойство — они либо работают, либо нет. Сегодня вы узнаете, что нужно учесть, чтобы заставить ваши эксперименты работать и приносить тем самым пользу бизнесу. Мы рассмотрим шесть самых распространённых причин, ведущих к несостоятельности системы принятия решений с помощью A/B-тестирования.",
      "A/B-тестирование обеспечивает среднестатистическое принятие верных решений. На данный момент времени это единственный надежный способ проверки гипотез, так как мы можем зафиксировать очень важный параметр — сколько раз в среднем мы хотим ошибаться. Другие статистические методы, к сожалению, не обладают таким свойством, что делает их значительно менее надёжными.",
      "Чтобы среднестатистически принимать верные с точки зрения бизнеса решения, необходимо постоянно контролировать уровни ошибок I и II рода на установленных заранее значениях:",
      "Ошибка I рода — на самом деле эффекта нет, но мы считаем, что он есть",
      "Ошибка II рода — на самом деле эффект есть, но мы считаем, что его нет",
      "Как раз контроль этих ошибок и делает A/B-тестирование незаменимым инструментом в проверке гипотез. Можно это выразить так: мы делаем ошибки, но мы знаем их вероятность, и нас она устраивает. Обеспечить контроль ошибок I и II рода довольно просто — не нужно делать ошибок в методологии. ",
    ],
  },
  {
    date: '01.04.23',
    newImg: "",
    id: "3",
    img: "https://hsto.org/r/w1560/getpro/habr/upload_files/2a6/02c/a91/2a602ca91beebe731ee3b3ee5441fbf6.png",
    description: "Фаззинг и зачем он нужен?",
    fullText: [
      "Чем фаззинг отличается от классического юнит-тестирования? Когда речь идёт о сложном коде, с помощью стандартного юнит-тестирования физически невозможно покрыть все возможные варианты входных данных. Признаем, что программисты ленивы и чаще всего ограничивают юнит-тесты несколькими простыми тест-кейсами. Фаззинг же позволяет разнообразить юнит-тесты случайным вводом и таким образом покрыть больше вариантов входных данных. Что можно фаззить? Для тестирования фаззингом лучше всего подходит код, который принимает на вход сложно устроенные данные: разные энкодеры и декодеры, криптографию, сетевые протоколы, кодеки и т. д. В современном мире разработки программного обеспечения методы API часто «торчат наружу» и обрабатывают недоверенные данные, что делает фаззинг-тестирование особенно актуальным.  Какие баги можно найти фаззингом?",
      "Фаззинг — это техника тестирования программного обеспечения, часто автоматическая или полуавтоматическая, заключающаяся в передаче приложению на вход неправильных, неожиданных или случайных данных.",
      "Если программа повела себя некорректно или упала, значит, мы нашли баг.",
      "Чем фаззинг отличается от классического юнит-тестирования?",
      "Когда речь идёт о сложном коде, с помощью стандартного юнит-тестирования физически невозможно покрыть все возможные варианты входных данных. Признаем, что программисты ленивы и чаще всего ограничивают юнит-тесты несколькими простыми тест-кейсами. Фаззинг же позволяет разнообразить юнит-тесты случайным вводом и таким образом покрыть больше вариантов входных данных.",
      "Что можно фаззить?",
      "Для тестирования фаззингом лучше всего подходит код, который принимает на вход сложно устроенные данные: разные энкодеры и декодеры, криптографию, сетевые протоколы, кодеки и т. д. В современном мире разработки программного обеспечения методы API часто «торчат наружу» и обрабатывают недоверенные данные, что делает фаззинг-тестирование особенно актуальным.",
      "Какие баги можно найти фаззингом?",
      "С помощью фаззинга можно найти любые баги, как и другими методами тестирования, но чаще всего обнаруживаются следующие: деление на ноль,Аллоцирование слишком большого объёма памяти (Out of memory),Выход за границы массива, Паники, Ошибки сегментации,Слишком большое потребление ресурсов памяти и процессора,Слишком объёмные выходные данные,Попадание программы в бесконечный цикл или в бесконечную рекурсию, Состояние гонки, Запись в закрытый канал.",
      "Некоторые из перечисленных багов могут стать векторами для DoS-атаки на сервер, на котором развёрнуто приложение.",
      "Ещё с помощью фаззинга можно сравнивать результаты работы сложной и быстрой, но предположительно менее надёжной реализации алгоритма с результатами медленной и надёжной.",
    ],
  },
  {
    date: '09.09.22',
    newImg: "",
    id: "4",
    img: "https://hsto.org/r/w1560/getpro/habr/upload_files/7d6/ef5/1a4/7d6ef51a4ae3f82011a1f1f7e58ab6f0.png",
    description: "IT сфера уйдет от сжатых сроков",
    fullText: [
      "Занимаясь подбором IT-персонала я довольно часто встречаю резюме кандидатов, которые сменили отрасль на IT, поработав некоторое время в других отраслях. По моим субъективным ощущениям, таких специалистов на рынке труда в IT от 20% до 30%. Люди получают образование, часто даже не техническое — экономиста, бухгалтера, юриста, HR и затем, получив опыт работы по специальности, переходят в IT. Кто-то остается в профессии, но меняет отрасль, а кто-то меняет не только отрасль, но и профессию.",
      "Я решил провести исследование. Меня интересуют причины и мотивация перехода в IT из других отраслей. А также основные трудности, которые возникают при таком переходе, какими инструментами и источниками информации пользуются желающие перейти в IT для обучения и самообучения. Я опросил 12 человек лично и 128 человек прошло онлайн-опрос. Заполненные анкеты перестали поступать и я подвел итоги. В опросе в основном открытые вопросы, мне было важно как респонденты своими словами описывают свой опыт, а не к каким готовым формулировкам они склоняются.",
      "Большое спасибо читателям, которые приняли участие в опросе. Я очень рад вашим подробным и откровенным рассказам.",
      "Далее представляю результаты исследования.",
      "В исследовании приняли участие 140 человек",
      "Состав аудитории: Женщины — 22%, Мужчины — 78%.",
      "По итогам опроса у специалистов, сменивших сферу деятельности на IT, наиболее популярны следующие IT-профессии:  Разработчики (не указали свою специализацию) — 50%, Фронтенд-разработчики — 9%,Бэкенд-разработчики — 9%, HR — 6%, Проект-менеджеры — 6%, QA — 6%, Аналитики бизнес-процессов — 6%, Системные администраторы — 5%, Техническая поддержка — 2%,Продажи — 1%",
      "Был ли переход в IT осмысленным решением?",
      "У большинства опрошенных переход в IT был осмысленным и желанным (примерно 85%). Они предпринимали усилия, чтобы приобрести недостающие знания. Небольшая часть из них сменила отрасль, оставаясь в профессии (HR, руководители проектов). Оставшиеся 15% оказались в IT случайно, без какого-либо четко выраженного желания. Просто решили попробовать свои силы в новой отрасли. А кто-то даже реализовывал детскую мечту после того, как получил не-IT образование по настоянию родственников.",
      "Ожидания оправдались?",
      "63% ответили, что все их ожидания и представления об отрасли оправдались. 12% ответили, что работа в IT превзошла их ожидания и они в полном восторге. 22% заявили, что их ожидания пока что не полностью оправдались. 3% утверждают, что их ожидания не опрадались. Один респондент ответил, что жалеет о работе в IT, так как у него за время работы ухудшилось здоровье (зрение, опорно-двигательный аппарат) и он хочет перейти в другую сферу деятельности.",
    ],
  },
  {
    date: '02.08.22',
    newImg: "",
    id: "5",
    img: "https://hsto.org/r/w780/getpro/habr/upload_files/ace/1e2/5ad/ace1e25ad23f71e12a32132b2939ad7e.jpg",
    description: "Разработчики пишут код",
    fullText: [
      "Это несерьёзная статья на серьёзную тему. Есть такое понятие, как JSDD - Job Safety (Security) Driven Development, мы часто видим его в крупных компаниях. От этого не избавлены и небольшие компании, особенно когда в штате всего несколько программистов. Разработчики пишут свой код столь изысканным способом, что, несмотря на очень низкую скорость разработки, их страшно уволить, потому что, кроме них, этот код никто понять не сможет. Давайте попробуем разобрать, почему и как такое происходит.",
      "Меня зовут Константин Митин, я сооснователь и руководитель компании АйТи Мегастар/АйТи Мегагруп. Когда-то был простым разработчиком, работал в L3, дорос до тимлида, затем и до руководителя филиала разработки крупной ИТ-компании. Теперь я в АйТи Мегагруп",
      "Предыстория появления подхода",
      "В разработке программного обеспечения есть много полезных инструментов и методологий. Например, когда я сам писал код, мне нравилось использовать TDD (Test Driven Development). Это разработка через тестирование, когда ты сначала пишешь тесты для своего функционала, а потом реализуешь сам функционал. Затем дорабатываешь тесты, следом дорабатываешь функционал.",
      "Помните выбор между быстро, качественно и недорого? На самом деле, делать качественно - быстрее и дешевле, потому что ты выпускаешь меньше брака. TDD даёт именно такой эффект. Кому-то может показаться странным, но большую часть рабочего времени программист думает, а не набирает код. Большинство программистов не обладает навыками слепой печати просто потому, что разработку этот навык никак не ускоряет.",
      "Делать качественно - быстрее и дешевле. Ты меньше ошибаешься и меньше тратишь время на исправление ошибок.",
      "Когда человек проектирует и реализует тесты — он думает над тем, каким должен быть функционал, как он должен работать, какие есть узкие места. Во многом это похоже на размышления с ручкой и листом бумаги, но тут ещё автоматические тесты появляются, которые помогают потом в отладке. Мне часто приходилось работать с чужим и уставшим кодом. Видел я при этом всякое. Иногда это был уже не рефакторинг, а реинжиниринг кода. В таких случаях написать тесты для заменяемого функционала, чтобы сохранить обратную совместимость, просто необходимо в целях безопасности. Заодно, пока пишешь тесты, исследуешь заменяемый функционал, понимаешь, как и почему именно так он работает, находишь в нём ошибки и принимаешь решение по их исправлению. Именно принимаешь решение исправлять ошибку либо придётся писать имитатор ошибки, как это было сделано в Win98 для сохранения обратной совместимости с Win95. Иногда исправить ошибку в месте, над которым работаешь — это обрушить целый модуль на другом краю приложения, потому что код изобилует костылями. И никто не рассчитывал, что всё внезапно заработает. В результате получался понятный, самодокументируемый код со встроенными средствами самопроверки. То есть меня могли легко уволить и отдать код другому разработчику, он бы в нём быстро разобрался. Это важный момент.",
    ],
  },
  {
    date: '19.03.23',
    newImg: "",
    id: "6",
    img: "https://hsto.org/r/w1560/webt/37/5c/dl/375cdlu-p9edhlc4ziu9i8wblcq.png",
    description: "Трюки HTML, CSS и JS",
    fullText: [
      "Здесь вы найдёте небольшую подборку нестандартных вариантов использования HTML/CSS/JS. Если информация окажется полезной, будем собирать эти хаки на постоянной основе и публиковать по мере накопления.",

      "Примечание. Некоторые трюки основаны на открытых уязвимостях браузеров и поисковой системы Google и др. Поэтому могут перестать работать в ближайшее время (или продолжат, если разработчики не признают баги и не захотят их исправлять). Другие функции работают только начиная с конкретных версий Chrome, Firefox и т. д.",
      "Маркетолог и SEO-оптимизатор Дэн Петрович нашёл способ, как отслеживать действия пользователей на сайтах конкурентов, включая полную информацию о просмотрах страниц, переходах по ссылкам, времени просмотра, видеозаписях сессий и нажатиях клавиш. Можно собирать всю информацию, которая вводится в веб-формы на чужом сайте, и получать её к себе по электронной почте. Всё это делается с помощью подделки чужого сайта и заманивания юзеров на это зеркало. Способ не совсем этичный, поэтому публикуем информацию исключительно в образовательных целях.",
      "Делать качественно - быстрее и дешевле. Ты меньше ошибаешься и меньше тратишь время на исправление ошибок.",

      "Алгоритм:",
    ],
  },
  {
    date: '19.04.23',
    newImg: '',
    id: '7',
    img: 'https://habrastorage.org/r/w1560/webt/74/vz/x2/74vzx2bpssgri4tppu9u3xwv5vc.png',
    description: 'Из NPM удалили зловредный пакет',
    fullText: [
      'В четверг, 16 октября, команда безопасности npm удалила с портала четыре пакета JavaScript, содержащие вредоносный код.','Согласно результатам аудита группы безопасности npm, четыре библиотеки JavaScript открывали доступ к шелл-коду операционной системы компьютеров, на которые разработчики импортировали пакеты для своих проектов. Кроме того, команда безопасности npm заявила, что уязвимости работают как в операционных системах Windows, так и в Linux, FreeBSD, OpenBSD и других.', 'Согласно результатам аудита группы безопасности npm, четыре библиотеки JavaScript открывали доступ к шелл-коду операционной системы компьютеров, на которые разработчики импортировали пакеты для своих проектов. Кроме того, команда безопасности npm заявила, что уязвимости работают как в операционных системах Windows, так и в Linux, FreeBSD, OpenBSD и других.', 'Один из них был доступен для использования с мая 2018 года, еще два — с сентября 2018 года. Каждый из них был скачан несколько сотен раз. Речь идет о следующих пакетах:', 'plutov-slack-client','nodetest199','nodetest1010', 'npmpubman', 'Согласно заявлениям группы безопасности npm, любой компьютер, на котором был установлен один из этих пакетов, следует считать полностью скомпрометированным. Все конфиденциальные данные на нем следует перенести, а для критически важной информации создать резервную копию. Удаление скомпрометированного пакета не гарантирует безопасность, поскольку использование найденной уязвимости позволяет установить на компьютер любое вредоносное ПО.', 'Согласно политике npm, сотрудники службы безопасности осуществляют регулярные проверки, включающие испытания на проникновение и аудит кода. Документация по внутренним аудитам npm доступна и предоставляется по запросу.', 'Несмотря на это, за последние три месяца зловредные npm-пакеты находят уже в третий раз. В августе 2020 года сотрудники npm удалили вредоносную библиотеку JavaScript, которая содержала в себе уязвимость позволяющую похитить конфиденциальные файлы через браузер или клиент Discord. В сентябре этого года команда безопасности npm удалила четыре библиотеки JavaScript, которые собирали данные пользователей и загружали их на GitHub.'

    ]
  },
  {
  date: '01.01.23',
    newImg: '',
    id: '8',
    img: 'https://habrastorage.org/files/4da/094/bdd/4da094bdddfe4d758b870f5f7fb5f204.png',
    description: 'React: собираем с нуля изоморфное',
    fullText: [
      'Это продолжение статьи про разработку изоморфного приложения с нуля на React.js. В этой части мы добавим несколько страниц, bootstrap, роутинг, концепцию Flux и ее популярную реализацию Redux.',' Добавляем в проект react-bootstrap','Это очень популярная библиотека, которая позволяет использовать элементы bootstrap в стиле React.','Например, вместо конструкций вида','<div className="nav navbar">', 'мы сможем писать', '<Nav navbar>','Также не придется использовать JavaScript-код оригинального bootstrap, ведь он уже реализован в компонентах react-bootstrap.'

    ]
  },
  {
    date: '02.02.23',
    newImg: '',
    id: '9',
    img: 'https://habrastorage.org/r/w780/getpro/habr/upload_files/419/6b5/6da/4196b56da30efd52d701329c6ea4e05d.jpeg',
    description: 'Как хорошо вы знаете Java?',
    fullText:[ 'Кто разработал этот язык? Почему ему дали такое название? Как называются переменные, которые могут принимать только два значения: истина и ложь? Встречайте новый кроссворд, посвящённый языку программирования Java.', 'Язык Java был разработан в середине 90-ых годов прошлого века и на данный момент является одним из самых используемых языков программирования. Он занимает второе место в различных рейтингах популярности среди языков за последние годы, уступая только Python.','Язык Java был разработан в середине 90-ых годов прошлого века и на данный момент является одним из самых используемых языков программирования. Он занимает второе место в различных рейтингах популярности среди языков за последние годы, уступая только Python.', 'Java — универсальный язык программирования, который повсеместно используется разработчиками. Он подходит для мобильных приложений и игр, для смартфонов и игровых консолей, для суперкомпьютеров и автомобильных мультимедиа. Сотни тысяч компаний используют Java в своей работе.', 'Чтобы узнать, насколько хорошо вы разбираетесь в Java, переходите к кроссворду и проверяйте свои знания на платформе RSHB DIGITAL. Участникам предстоит ответить на вопросы об истории языка программирования и его терминологии.']
  }
];
